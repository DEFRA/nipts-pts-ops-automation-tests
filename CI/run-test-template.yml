parameters:
  - name: jobName
    type: string
  - name: environment
    type: string
  - name: branchName
    type: string
  - name: seleniumGrid
    type: string
  - name: deviceName
    type: string
  - name: bsOSVersion
    type: string
  - name: dependsOn
    type: string
  - name: workers
    type: string
  - name: bsBrowserVersion
    type: string
  - name: target
    type: string
  - name: isEmulationEnabled
    type: string
  - name: emulateDeviceInfo
    type: string
  - name: application
    type: string
  - name: filterTestCases
    type: string
    default: ''
  - name: isAccessibilityEnabled
    type: boolean
    default: false

jobs: 

- job: ${{ parameters.jobName }}
  displayName: ${{ parameters.jobName }}
  timeoutInMinutes: 300

  pool:
    ${{ if contains(parameters.seleniumGrid, 'localhost') }}:
      name: 'DEFRA-COMMON-ubuntu2004-SSV3'
    ${{ if contains(parameters.seleniumGrid, 'browserstack') }}:
      name: 'DEFRA-TRD'

  variables:
    - group: 'NIPTSPREPROD'
    - template: 'variables/${{parameters.application}}/global.yml'
      parameters:
        environment: ${{parameters.environment}}
        workers: ${{parameters.workers}}
        seleniumGrid: ${{parameters.seleniumGrid}}
        deviceName: ${{parameters.deviceName}}
        bsOSVersion: ${{parameters.bsOSVersion}}
        bsBrowserVersion:  ${{parameters.bsBrowserVersion}}
        target:  ${{parameters.target}}
        isEmulationEnabled:  ${{parameters.isEmulationEnabled}}
        emulateDeviceInfo:  ${{parameters.emulateDeviceInfo}}
        idcomsPassword: '$(PetsIDCOMSCredential)'
        isAccessibilityEnabled: ${{parameters.isAccessibilityEnabled}}
    - name: FilterTestCases
      ${{ if eq(parameters.filterTestCases, '') }}:
        value: $(FilterTestCategory)
      ${{ else }}:
        value: ${{parameters.filterTestCases}}
  steps:
  
    - task: DownloadBuildArtifacts@0
      displayName: TestArtifact
      inputs:
        buildType: 'specific'
        project: '023a3c95-20fd-49b4-b068-4706843ba0d7'
        pipeline: '8452'
        buildVersionToDownload: 'latestFromBranch'
        branchName: ${{ parameters.branchName }}
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy Test Artifacts'
      inputs:
        SourceFolder: '$(System.ArtifactsDirectory)/drop'
        TargetFolder: $(System.DefaultWorkingDirectory)
        OverWrite: true
        CleanTargetFolder: true
    
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: '**/Defra.UI.Tests.zip'
        destinationFolder: '$(System.DefaultWorkingDirectory)/Defra.UI.Tests'
        cleanDestinationFolder: false
        overwriteExistingFiles: true
    
    - task: replacetokens@3
      displayName: Replace Tokens for appsettings
      inputs:
        rootDirectory: '$(System.DefaultWorkingDirectory)/Defra.UI.Tests'
        targetFiles: 'appsettings.json'
        encoding: auto
        writeBOM: true
        escapeType: json
        actionOnMissing: warn
        keepToken: false
        tokenPrefix: '#{{'
        tokenSuffix: '}}'
        useLegacyPattern: false
        enableTelemetry: false

    - powershell: |
        $jsonString = Get-Content "$(System.DefaultWorkingDirectory)/Defra.UI.Tests/appsettings.json" | Out-String
        Write-Host $jsonString
      displayName: 'Display appsettings.json'

    - task: replacetokens@3
      displayName: Replace Tokens for IDCOMS configuration file
      inputs:
        rootDirectory: '$(System.DefaultWorkingDirectory)/Defra.UI.Tests'
        targetFiles: 'power-apps-bindings.yml'
        encoding: auto
        writeBOM: true
        escapeType: json
        actionOnMissing: warn
        keepToken: false
        tokenPrefix: '#{{'
        tokenSuffix: '}}'
        useLegacyPattern: false
        enableTelemetry: false

    - powershell: |
        $ymlString = Get-Content "$(System.DefaultWorkingDirectory)/Defra.UI.Tests/power-apps-bindings.yml" | Out-String
        Write-Host $ymlString
      displayName: 'Display power-apps-bindings.yml'

    - ${{ if contains(parameters.seleniumGrid, 'localhost:') }}:
      - powershell:
          docker system prune -a --volumes --force
        displayName: 'Stop and Clean all containers'

    - ${{ if contains(parameters.seleniumGrid, 'localhost:') }}:
      - task: DockerCompose@0
        displayName: Run a Docker Compose command
        inputs:
          action: Run a Docker Compose command
          workingDirectory: $(System.DefaultWorkingDirectory)/Defra.UI.Tests
          dockerComposeFile: $(System.DefaultWorkingDirectory)/Defra.UI.Tests/docker-compose-grid.yml 
          projectName: defra-ui-tests
          qualifyImageNames: true
          dockerComposeCommand: up -d
          #arguments: '--exit-code-from selenium-hub'

    - powershell: |
          Set-Location -Path "$(System.DefaultWorkingDirectory)/Defra.UI.Tests"
          dotnet test "$(System.DefaultWorkingDirectory)/Defra.UI.Tests/Defra.UI.Tests.dll" --settings "$(System.DefaultWorkingDirectory)/Defra.UI.Tests/testrun_${{ parameters.workers }}.runsettings" --filter "$(FilterTestCases)" --logger:"trx;logfilename=${{ parameters.jobName }}_$(System.StageName).xml"
      displayName: 'Execute Tests'
      failOnStderr: true
      ignoreLASTEXITCODE: true
      continueOnError: true

    - ${{ if contains(parameters.seleniumGrid, 'localhost:') }}:
      - task: DockerCompose@0
        displayName: Run a Docker Compose command
        inputs:
          action: Run a Docker Compose command
          workingDirectory: $(System.DefaultWorkingDirectory)/Defra.UI.Tests
          dockerComposeFile: $(System.DefaultWorkingDirectory)/Defra.UI.Tests/docker-compose-grid.yml 
          projectName: defra-ui-tests
          qualifyImageNames: true
          dockerComposeCommand: down
    
    - powershell: |
        Set-Location -Path "$(System.DefaultWorkingDirectory)/Defra.UI.Tests"
        Get-Content -Path TestExecution.json
      displayName: 'Display Test Exe Json'
      failOnStderr: true
      ignoreLASTEXITCODE: true
      continueOnError: true

    - powershell: |
        Set-Location -Path "$(System.DefaultWorkingDirectory)/Defra.UI.Tests"
        Rename-Item -Path "TestExecution.json" -NewName "TestExecution_${{ parameters.jobName }}.json"            
        Get-Content -Path $(System.DefaultWorkingDirectory)/Defra.UI.Tests/TestExecution_${{ parameters.jobName }}.json
      displayName: 'Display TestExecution_${{ parameters.jobName }}.json'
      failOnStderr: true
      ignoreLASTEXITCODE: true
      continueOnError: true
      condition: always() # this step will always run, even if the pipeline is canceled

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Json reports for Specflow'
      inputs:
          testResultsFiles: 'TestExecution_${{ parameters.jobName }}.json'
          artifactName: TestExecution_${{ parameters.jobName }}
          targetPath: '$(System.DefaultWorkingDirectory)/Defra.UI.Tests/TestExecution_${{ parameters.jobName }}.json'
    
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Screenshots'
      inputs:
          testResultsFiles: 'TestFailures*.png'
          artifactName: ${{ parameters.jobName }}_$(System.StageName)
          targetPath: '$(System.DefaultWorkingDirectory)/Defra.UI.Tests/TestResults/'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: ${{ parameters.jobName }}_$(System.StageName).xml
        searchFolder: '$(System.DefaultWorkingDirectory)/Defra.UI.Tests/TestResults/'
        testRunTitle: ${{ parameters.jobName }}
        failTaskOnFailedTests: true
        continueOnError: true
  
    
